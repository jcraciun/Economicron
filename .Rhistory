for(i in seq_len(6)) {
lost_squares[i] <- lost_nums[i]^2
}
lost_squares
i <- 1
for(i in seq_len(6)) {
lost_squares[i] <- lost_nums[i]^2
lost_squares
lost_squares <- numeric(6)
for(i in seq_len(6)) {
lost_squares[i] <- lost_nums[i]^2
}
# take first entry of lost_nums, square it, then input it into the same entry of lost_squares
# you can also break it down
i <- 1
lost_squares[i] <- lost_nums[i]^2
i <- 1
merge <- function(left, right) {
merged <- numeric(0)
while (length(left) > 0) {
if (length(right) > 0) {
if (left[1] < right[1]) {
merged <- c(merged, left[1])
left <- left[-1]
} else {
merged <- c(merged, right[1])
right <- right[-1]
}
} else {
merged <- c(merged, left)
left <- left[!left]
}
}
c(merged, right)
}
merge_sort <- function(x) {
if (length(x) > 1) {
cutoff <- (length(x) / 2)
left <- x[1 : cutoff]
right <- x[(cutoff + 1) : length(x)]
sorted_left <- merge_sort(left)
sorted_right <- merge_sort(right)
x <- merge(sorted_left, sorted_right)
}
x
}
merge_sort(numeric(0))
merge_sort(7)
merge_sort(10:1)
my_ifelse <- function(test, yes, no) {
final <- numeric(0)
for (i in seq_along(test)) {
if(test[i]) {
final <-  c(final, yes[i])
} else {
final <- c(final, no[i])
}
}
final
}
x <- (1:10) * pi
my_ifelse(x %% 1 >= 0.5, x %/% 1 + 1, x %/% 1)
abs <- function(x) {
my_ifelse(x > 0, x, x * (-1))
}
my_abs <- function(x) {
my_ifelse(x > 0, x, x * (-1))
}
my_abs(-1)
my_abs(-36)
my_abs(0)
my_abs <- function(x) {
my_ifelse(x >= 0, x, x * (-1))
}
my_abs(0)
sign(-3)
my_abs <- function(x) {
my_ifelse(x >= 0, x, x * (-1))
}
my_sign <- function(x) {
my_ifelse(x >= 0, 1, -1)
}
my_sign(-3)
my_sign(-3)
sign(0)
my_sign(0)
sign(0)
my_abs <- function(x) {
my_ifelse(x >= 0, x, x * (-1))
}
my_sign <- function(x) {
my_ifelse(x > 0, 1, -1)
}
my_sign(0)
sign(0)
my_abs <- function(x) {
my_ifelse(x >= 0, x, x * (-1))
}
my_sign <- function(x) {
if(x == 0) {
0
} else {
my_ifelse(x >= 0, 1, -1)
}
}
my_sign(0)
sign(0)
my_sign(0)
sign(0)
my_sign(-4)
my_abs <- function(x) {
my_ifelse(x >= 0, x, x * (-1))
}
my_sign <- function(x) {
if(x == 0) {
0
} else {
my_ifelse(x >= 0, 1, -1)
}
}
fib1 <- 1
fib2 <- 1
full_fib <- c(fib1, fib2)
while (fib1 + fib2 < 500) {
fib2 <- fib1 + fib2
fib1 <- fib2 - fib1
full_fib <- c(full_fib, fib2)
}
full_fib
B[1]
B <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
B[-1]
B[-1,]
B[1, ]
B[1, drop = TRUE]
B[1, drop = FALSE]
B[1, , drop = FALSE]
B[7]
attr(B, "dim") <- c(3,3)
b
B
tall_index <- parks_mat[,1] > 65
parks_mat <- cbind(c(62, 71, 66), c(115, 201, 119), c(4000, NA, 2000))
rownames(parks_mat) <- c("Leslie", "Ron", "April")
colnames(parks_mat) <- c("Height", "Weight", "Income")
tall_index <- parks_mat[,1] > 65
tall_index
parks_mat[tall_index,]
parks_mat["Leslie"]
parks_mat["Leslie",]
parks_mat[,"Income"]
parks_mat["Ron", "Height"]
A <- matrix(1:6, nrow = 2, ncol = 3)
B <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
x <- c(1:2, NA, 3:4, NA)
y <- c(NA, 2:3, NA, 4:5)
rbind(x, y)
add_y_to_row_n <- function(A, y, n) {
if (n > nrow(A)) {
stop("invalid n for given A.")
} else {
B[n, ] <- y
}
}
add_y_to_row_n(1:6, 3, 2)
add_y_to_row_n(matrix(1:6, nrow = 2), 3, 2)
add_y_to_row_n <- function(A, y, n) {
if (n > nrow(A)) {
stop("invalid n for given A.")
} else {
A[n, ] <- y
}
A
}
add_y_to_row_n(matrix(1:6, nrow = 2), 3, 2)
ifelse(max[x, y], TRUE, FALSE)
apply(x,y, c(1, 2), max)
apply(c(x, y), 1, max)
apply(rbind(x, y), 1, max)
x <- c(Inf, 3, 2, 6, 99)
y <- c(12, 1, 0, 40, 5)
apply(rbind(x, y), 1, max)
ifelse(apply(rbind(x, y), 1, max), TRUE, FALSE)
apply(rbind(x, y), 1, max)
add_y_row_n <- function(A, y, n) {
A[n, ] <- A[n, ] + y
A
}
add_y_row_n(matrix(1:6, nrow = 2), 3, 2)
x == max(x)
y == max(y)
x == max(x) | y == max(y)
is_mat_multipliable <- function(X, Y) {
ncol(X) == nrow(Y)
}
library(MASS)
search
search()
?mean
help(mean)
??regression
help.search("regression")
library(help = MASS)
data(mallas)
data(mammals)
ls()
mammals
data(trees)
ls
trees
?trees
data(package = MASS)
data(package = "MASS")
data(geyser)
head(geyser)
parks_mat <- cbind("Height" = c(62, 71, 66),
"Weight" = c(115, 201, 119),
"Income" = c(4000, NA, 2000))
rownames(parks_mat) <- c("Leslie", "Ron", "April")
parks_mat
parks_df <- data.frame(
"Name" = c("Leslie", "Ron", "April"),
"Height" = c(62, 71, 66),
"Weight" = c(115, 201, 119),
"Income" = c(4000, NA, 2000)
)
parks_df
parks_df[,1]
parks_df[,2]
data.frame(parks.mat)
data.frame(parks_mat)
parks_df
dim(parks_df)
rownames(parks_df)
colnames(parks_df)
cbind(parks_df, "Age" = c(34, 49, 20))
ron_dunn <- data.frame("Name" = "Ron",
"Height" = 74,
"Weight" = 194,
"Income" = 5000)
rbind(parks_df, ron_dunn)
rbdind(parks_df, list("Ron", 74, 194, 5000))
rbind(parks_df, list("Ron", 74, 194, 5000))
rbind(parks_df, c("Ron", 74, 194, 5000))
parks_df[,1]
parks_df[,-1]
parks_df[,"Name"]
parks_df[c(FALSE, FALSE, TRUE), "Income"]
parks_df[, "Name", drop = FALSE]
parks_df <- data.frame(
"Name" = c("Leslie", "Ron", "April"),
"Height" = c(62, 71, 66),
"Weight" = c(115, 201, 119),
"Income" = c(4000, NA, 2000)
stringsAsFactors = TRUE
)
parks_df
parks_df <- data.frame(
"Name" = c("Leslie", "Ron", "April"),
"Height" = c(62, 71, 66),
"Weight" = c(115, 201, 119),
"Income" = c(4000, NA, 2000),
stringsAsFactors = TRUE
)
# coerces character vectors into factors
parks_df[,1]
parks_df[[1]]
parks_df[["Height"]]
parks_df[[3]][[1]]
parks_df$Height
parks_df$Age <- c(34, 49, 20)
with(parks_df, Height)
with(parks_df, {
height_in_cm <- Height * 2.54 # Convert heights into cm
tall_cm_index <- height_in_cm > 165 # Find the heights taller than 165 cm
Name[tall_cm_index] # Output the names of the people who are taller than 165 cm
})
L <- list(
1:10,
matrix(1:6, 2, 3),
parks_df,
list(1:5, matrix(1:9, 3, 3))
)
L
parks_df
L
str(trees)
head(trees)
str(L)
str_trees <- str(L)
str_trees
summary(trees)
summary(trees$Volume)
summary(parks_df$Name)
summary(trees)
summary(parks_df)
summary(L)
source("~/_UCLA/STATS 20/Homework 5/Chapter 7.R", echo=TRUE)
attributes(L$vector)$class
attributes(L$data.frame)
# you should use class function if you want to know what the class is
L$name <- parks_df$Name
summary(L)
apply(trees, 2, mean)
apply(trees,2, range)
apply(trees, 1, mean)
apply(trees,2, range)
apply(parks_df, 2, mean)
as.matrix(parks_df)
apply(parks_df[,-1], 2, mean)
apply(parks_df[,-1], 2, mean, na.rm = TRUE)
summary(trees)
apply(trees, 2, summary)
apply(trees, 2, summary)
class(summary(trees))
mode(summary(trees))
lapply(l, length)
lapply(L, length)
lapply(trees, range)
apply(trees, 2, range)
which_median <- function(x) {
which(x == median(x))
}
lapply(trees, which_median)
sapply(L, list)
sapply(L, length)
sapply(trees, range)
sapply(trees, which_median)
apply(trees, 2, range)
sapply(trees, range)
sapply(parks_df, mean)
vapply(trees, range, numeric(2))
vapply(L, length, numeric(1))
vapply(trees, summary, numeric(6))
library(lares)
correlation_chart <- corr_cross(clean_data,
max_pvalue = .05,
top = 30)
print(correlation_chart)
type(3)
mode(3)
df(2, 3)
df <- data.frame(
x = c(4, 5, 6),
y = c('one', 'two', 'three')
)
df
return(0)
stop(0)
?return
measures_of_center <- function(x){
c(mean = mean(x), median = median(x))
}
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
map(vectors, measures_of_center())
map(vectors, measures_of_center)
seq_along(10)
seq_len(10)
df
df$x <- 1:3
df
df$z <- 1:3
df
as.numeric
as.numeric("3")
?tidyverse
??tidyverse
logical(2)
!logical(2)
?map
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(dplyr)
gapminder
gapminder %>%
filter (year == 1957)
?arrange
arrange(gapminder, lifeExp)
arrange(gapminder, lifeExp, desc = TRUE)
?mutate
?ggplot
library(stringr)
colors <- c("Red", "green", "bluE")
head(colors)
library(tidyverse)
ggplot(data = clean_data) + geom_point(mapping = aes(x = X, y = `Cost.of.Living`))
library(gapminder)
library(dplyr)
gapminder %>%
filter(year == 2007) %>%
mutate(lifeExpMonths = 12 * lifeExp) %>%
arrange(desc(lifeExpMonths))
library(ggplot2)
gapminder_1952 <- gapminder %>%
filter(year == 1952)
# Change to put pop on the x-axis and gdpPercap on the y-axis
ggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +
geom_point()
# Summarize the median gdpPercap by year, then save it as by_year
by_year <- gapminder %>%
group_by(year) %>%
summarize(medianGdpPercap = median(gdpPercap))
by_year_continent <- gapminder %>%
group_by(year, continent) %>%
summarize(medianGdpPercap = median(gdpPercap))
# Create a line plot showing the change in medianGdpPercap by continent over time
ggplot(by_year_continent, aes(x = year, y = medianGdpPercap), col = continent) + geom_line() + expand_limits(y = 0)
library(class)
signs$sign_type
?knn
?subset
library(naivebayes)
??naivebayes
??naiveBayes
library(naiveBayes)
# Load the naivebayes package
install.packages("naivebayes")
library(naivebayes)
?predict
?relevel
# find a set of ifelse conditions helpful for taking action
# divide and conquer
# rpart package --> recursive partition
library(rpart)
library(rvest)
install.packages("tidyverse")
install.packages('plyr')
install.packages('dyplr')
install.packages('dyplr')
install.packages('dplyr')
install.packages('Rtools')
install.packages('jsonlite', type = 'source')
install.packages('dplyr')
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which('make')
main_data <- read.csv('final_data.csv')
setwd("~/_UCLA/DataRes/Economicron")
main_data <- read.csv('final_data.csv')
main_data <- read.csv('final_dataset.csv')
library(gganimate)
install.packages('gganimate')
library(gganimate)
library(ggplot2)
library(ggimage)
install.packages('ggimage')
install.packages('ggthemes')
library(ggthemes)
options(gganimate.fps = 15)
head(main_data)
library(dplyr)
library(plyr)
library(plyr)
library(dplr)
library(dplyr)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, group = Continent)) +
geom_line()
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, group = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() +
transition_reveal(DATE)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, group = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, group = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) #+
continents <- main_data %>%
filter(Continent)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
#coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() #+
transition_reveal(DATE)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
#coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() +
transition_reveal(DATE)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
#coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() +
transition_reveal(DATE)
as.Date(main_data$DATE)
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
#coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() +
transition_reveal(DATE)
main_data = main_data[!is.na(main_data)]
ggplot(data = main_data, mapping = aes(x = DATE, y = total_cases, color = Continent)) +
geom_line(alpha = .9) +
geom_area(alpha = .4) +
#coord_cartesian(ylim = c(41, 51)) +
theme_fivethirtyeight() +
transition_reveal(DATE)
